<?php

/**
 * @file
 * Implements hooks for the decoupled_preview_iframe module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function decoupled_preview_iframe_form_node_preview_form_select_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('decoupled_preview_iframe.settings');
  $routeName = \Drupal::routeMatch()->getRouteName();
  $bundle = \Drupal::routeMatch()->getParameter('node_preview')->bundle();
  $isBundleEnabled = boolval($config->get('node_types.' . $bundle));

  if ($isBundleEnabled && $routeName === 'entity.node.preview') {
    $form['view_mode']['#access'] = FALSE;
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function decoupled_preview_iframe_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $config = \Drupal::config('decoupled_preview_iframe.settings');
  $isBundleEnabled = boolval($config->get('node_types.' . $entity->bundle()));
  $preview_url = $config->get('preview_url');
  if ($isBundleEnabled && $preview_url) {
    $current_path = \Drupal::service('path.current')->getPath();
    $current_path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
    $route_match = \Drupal::routeMatch();

    // Latest version tab should be showing latest revision.
    if ($route_match->getRouteName() === 'entity.node.latest_version') {
      // Get the latest revision.
      /** @var \Drupal\node\Entity\Node $latest_revision */
      $latest_revision = $route_match->getParameter('node');

      // Generate the URL for the revision view page.
      $url = Url::fromRoute('entity.node.revision', [
        'node' => $entity->id(),
        'node_revision' => $latest_revision->getRevisionId(),
      ]);
      $current_path_alias = $url->toString();
    }

    $node_token = '';
    // If the draft provider is set to GraphQL Compose Preview, we need to pass
    // the preview token to the iframe.
    if ($draft_provider = $config->get('draft.provider')) {
      if ($draft_provider === 'graphql_compose_preview' && $node_preview = \Drupal::routeMatch()->getParameter('node_preview')) {
        $node_token = "?token={$node_preview->preview_token->getString()}";
      }
    }
    // @todo Add support for other draft providers as JSON:API.
    $build = [];
    $build['iframe'] = [
      '#type' => 'html_tag',
      '#tag' => 'iframe',
      '#prefix' => '<div class="decoupled_preview_iframe-container">',
      '#suffix' => '</div>',
      '#attributes' => [
        'src' => "{$preview_url}{$current_path_alias}{$node_token}",
        'frameborder' => 0,
        'scrolling' => FALSE,
        'allowtransparency' => TRUE,
        'width' => '100%',
        'id' => 'node_preview',
        'class' => ['decoupled_preview_iframe'],
        'sandbox' => "allow-scripts allow-forms allow-same-origin allow-pointer-lock allow-presentation allow-top-navigation",
      ],
      '#attached' => [
        'library' => [
          'decoupled_preview_iframe/site',
        ],
        'drupalSettings' => [
          'decoupled_preview_iframe' => [
            'node_view' => [
              'selector' => 'iframe.decoupled_preview_iframe',
              'node' => $entity->uuid(),
              'src' => "{$preview_url}{$current_path_alias}",
              'routeSyncType' => $config->get('route_sync.type'),
            ],
          ],
        ],
      ],
    ];

    $build['#cache']['max-age'] = 0;
  }
}
